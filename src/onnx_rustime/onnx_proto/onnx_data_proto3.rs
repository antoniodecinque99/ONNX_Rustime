// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `onnx-data.proto3`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct SequenceProto {
    // message fields
    pub name: ::std::string::String,
    pub elem_type: i32,
    pub tensor_values: ::protobuf::RepeatedField<super::onnx_ml_proto3::TensorProto>,
    pub sparse_tensor_values: ::protobuf::RepeatedField<super::onnx_ml_proto3::SparseTensorProto>,
    pub sequence_values: ::protobuf::RepeatedField<SequenceProto>,
    pub map_values: ::protobuf::RepeatedField<MapProto>,
    pub optional_values: ::protobuf::RepeatedField<OptionalProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SequenceProto {
    fn default() -> &'a SequenceProto {
        <SequenceProto as ::protobuf::Message>::default_instance()
    }
}

impl SequenceProto {
    pub fn new() -> SequenceProto {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // int32 elem_type = 2;


    pub fn get_elem_type(&self) -> i32 {
        self.elem_type
    }
    pub fn clear_elem_type(&mut self) {
        self.elem_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_elem_type(&mut self, v: i32) {
        self.elem_type = v;
    }

    // repeated .onnx.TensorProto tensor_values = 3;


    pub fn get_tensor_values(&self) -> &[super::onnx_ml_proto3::TensorProto] {
        &self.tensor_values
    }
    pub fn clear_tensor_values(&mut self) {
        self.tensor_values.clear();
    }

    // Param is passed by value, moved
    pub fn set_tensor_values(&mut self, v: ::protobuf::RepeatedField<super::onnx_ml_proto3::TensorProto>) {
        self.tensor_values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tensor_values(&mut self) -> &mut ::protobuf::RepeatedField<super::onnx_ml_proto3::TensorProto> {
        &mut self.tensor_values
    }

    // Take field
    pub fn take_tensor_values(&mut self) -> ::protobuf::RepeatedField<super::onnx_ml_proto3::TensorProto> {
        ::std::mem::replace(&mut self.tensor_values, ::protobuf::RepeatedField::new())
    }

    // repeated .onnx.SparseTensorProto sparse_tensor_values = 4;


    pub fn get_sparse_tensor_values(&self) -> &[super::onnx_ml_proto3::SparseTensorProto] {
        &self.sparse_tensor_values
    }
    pub fn clear_sparse_tensor_values(&mut self) {
        self.sparse_tensor_values.clear();
    }

    // Param is passed by value, moved
    pub fn set_sparse_tensor_values(&mut self, v: ::protobuf::RepeatedField<super::onnx_ml_proto3::SparseTensorProto>) {
        self.sparse_tensor_values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sparse_tensor_values(&mut self) -> &mut ::protobuf::RepeatedField<super::onnx_ml_proto3::SparseTensorProto> {
        &mut self.sparse_tensor_values
    }

    // Take field
    pub fn take_sparse_tensor_values(&mut self) -> ::protobuf::RepeatedField<super::onnx_ml_proto3::SparseTensorProto> {
        ::std::mem::replace(&mut self.sparse_tensor_values, ::protobuf::RepeatedField::new())
    }

    // repeated .onnx.SequenceProto sequence_values = 5;


    pub fn get_sequence_values(&self) -> &[SequenceProto] {
        &self.sequence_values
    }
    pub fn clear_sequence_values(&mut self) {
        self.sequence_values.clear();
    }

    // Param is passed by value, moved
    pub fn set_sequence_values(&mut self, v: ::protobuf::RepeatedField<SequenceProto>) {
        self.sequence_values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sequence_values(&mut self) -> &mut ::protobuf::RepeatedField<SequenceProto> {
        &mut self.sequence_values
    }

    // Take field
    pub fn take_sequence_values(&mut self) -> ::protobuf::RepeatedField<SequenceProto> {
        ::std::mem::replace(&mut self.sequence_values, ::protobuf::RepeatedField::new())
    }

    // repeated .onnx.MapProto map_values = 6;


    pub fn get_map_values(&self) -> &[MapProto] {
        &self.map_values
    }
    pub fn clear_map_values(&mut self) {
        self.map_values.clear();
    }

    // Param is passed by value, moved
    pub fn set_map_values(&mut self, v: ::protobuf::RepeatedField<MapProto>) {
        self.map_values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_map_values(&mut self) -> &mut ::protobuf::RepeatedField<MapProto> {
        &mut self.map_values
    }

    // Take field
    pub fn take_map_values(&mut self) -> ::protobuf::RepeatedField<MapProto> {
        ::std::mem::replace(&mut self.map_values, ::protobuf::RepeatedField::new())
    }

    // repeated .onnx.OptionalProto optional_values = 7;


    pub fn get_optional_values(&self) -> &[OptionalProto] {
        &self.optional_values
    }
    pub fn clear_optional_values(&mut self) {
        self.optional_values.clear();
    }

    // Param is passed by value, moved
    pub fn set_optional_values(&mut self, v: ::protobuf::RepeatedField<OptionalProto>) {
        self.optional_values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_optional_values(&mut self) -> &mut ::protobuf::RepeatedField<OptionalProto> {
        &mut self.optional_values
    }

    // Take field
    pub fn take_optional_values(&mut self) -> ::protobuf::RepeatedField<OptionalProto> {
        ::std::mem::replace(&mut self.optional_values, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SequenceProto {
    fn is_initialized(&self) -> bool {
        for v in &self.tensor_values {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sparse_tensor_values {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sequence_values {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.map_values {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.optional_values {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.elem_type = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tensor_values)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.sparse_tensor_values)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.sequence_values)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.map_values)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.optional_values)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.elem_type != 0 {
            my_size += ::protobuf::rt::value_size(2, self.elem_type, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.tensor_values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.sparse_tensor_values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.sequence_values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.map_values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.optional_values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.elem_type != 0 {
            os.write_int32(2, self.elem_type)?;
        }
        for v in &self.tensor_values {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.sparse_tensor_values {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.sequence_values {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.map_values {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.optional_values {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SequenceProto {
        SequenceProto::new()
    }

    fn default_instance() -> &'static SequenceProto {
        static instance: ::protobuf::rt::LazyV2<SequenceProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SequenceProto::new)
    }
}

impl ::protobuf::Clear for SequenceProto {
    fn clear(&mut self) {
        self.name.clear();
        self.elem_type = 0;
        self.tensor_values.clear();
        self.sparse_tensor_values.clear();
        self.sequence_values.clear();
        self.map_values.clear();
        self.optional_values.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for SequenceProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SequenceProto_DataType {
    UNDEFINED = 0,
    TENSOR = 1,
    SPARSE_TENSOR = 2,
    SEQUENCE = 3,
    MAP = 4,
    OPTIONAL = 5,
}

impl ::protobuf::ProtobufEnum for SequenceProto_DataType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SequenceProto_DataType> {
        match value {
            0 => ::std::option::Option::Some(SequenceProto_DataType::UNDEFINED),
            1 => ::std::option::Option::Some(SequenceProto_DataType::TENSOR),
            2 => ::std::option::Option::Some(SequenceProto_DataType::SPARSE_TENSOR),
            3 => ::std::option::Option::Some(SequenceProto_DataType::SEQUENCE),
            4 => ::std::option::Option::Some(SequenceProto_DataType::MAP),
            5 => ::std::option::Option::Some(SequenceProto_DataType::OPTIONAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SequenceProto_DataType] = &[
            SequenceProto_DataType::UNDEFINED,
            SequenceProto_DataType::TENSOR,
            SequenceProto_DataType::SPARSE_TENSOR,
            SequenceProto_DataType::SEQUENCE,
            SequenceProto_DataType::MAP,
            SequenceProto_DataType::OPTIONAL,
        ];
        values
    }
}

impl ::std::marker::Copy for SequenceProto_DataType {
}

impl ::std::default::Default for SequenceProto_DataType {
    fn default() -> Self {
        SequenceProto_DataType::UNDEFINED
    }
}

impl ::protobuf::reflect::ProtobufValue for SequenceProto_DataType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MapProto {
    // message fields
    pub name: ::std::string::String,
    pub key_type: i32,
    pub keys: ::std::vec::Vec<i64>,
    pub string_keys: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub values: ::protobuf::SingularPtrField<SequenceProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MapProto {
    fn default() -> &'a MapProto {
        <MapProto as ::protobuf::Message>::default_instance()
    }
}

impl MapProto {
    pub fn new() -> MapProto {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // int32 key_type = 2;


    pub fn get_key_type(&self) -> i32 {
        self.key_type
    }
    pub fn clear_key_type(&mut self) {
        self.key_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_key_type(&mut self, v: i32) {
        self.key_type = v;
    }

    // repeated int64 keys = 3;


    pub fn get_keys(&self) -> &[i64] {
        &self.keys
    }
    pub fn clear_keys(&mut self) {
        self.keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_keys(&mut self, v: ::std::vec::Vec<i64>) {
        self.keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_keys(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.keys
    }

    // Take field
    pub fn take_keys(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.keys, ::std::vec::Vec::new())
    }

    // repeated bytes string_keys = 4;


    pub fn get_string_keys(&self) -> &[::std::vec::Vec<u8>] {
        &self.string_keys
    }
    pub fn clear_string_keys(&mut self) {
        self.string_keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_string_keys(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.string_keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_string_keys(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.string_keys
    }

    // Take field
    pub fn take_string_keys(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.string_keys, ::protobuf::RepeatedField::new())
    }

    // .onnx.SequenceProto values = 5;


    pub fn get_values(&self) -> &SequenceProto {
        self.values.as_ref().unwrap_or_else(|| <SequenceProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    pub fn has_values(&self) -> bool {
        self.values.is_some()
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: SequenceProto) {
        self.values = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_values(&mut self) -> &mut SequenceProto {
        if self.values.is_none() {
            self.values.set_default();
        }
        self.values.as_mut().unwrap()
    }

    // Take field
    pub fn take_values(&mut self) -> SequenceProto {
        self.values.take().unwrap_or_else(|| SequenceProto::new())
    }
}

impl ::protobuf::Message for MapProto {
    fn is_initialized(&self) -> bool {
        for v in &self.values {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.key_type = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.keys)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.string_keys)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.values)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.key_type != 0 {
            my_size += ::protobuf::rt::value_size(2, self.key_type, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.keys {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.string_keys {
            my_size += ::protobuf::rt::bytes_size(4, &value);
        };
        if let Some(ref v) = self.values.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.key_type != 0 {
            os.write_int32(2, self.key_type)?;
        }
        for v in &self.keys {
            os.write_int64(3, *v)?;
        };
        for v in &self.string_keys {
            os.write_bytes(4, &v)?;
        };
        if let Some(ref v) = self.values.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MapProto {
        MapProto::new()
    }

    fn default_instance() -> &'static MapProto {
        static instance: ::protobuf::rt::LazyV2<MapProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MapProto::new)
    }
}

impl ::protobuf::Clear for MapProto {
    fn clear(&mut self) {
        self.name.clear();
        self.key_type = 0;
        self.keys.clear();
        self.string_keys.clear();
        self.values.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MapProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct OptionalProto {
    // message fields
    pub name: ::std::string::String,
    pub elem_type: i32,
    pub tensor_value: ::protobuf::SingularPtrField<super::onnx_ml_proto3::TensorProto>,
    pub sparse_tensor_value: ::protobuf::SingularPtrField<super::onnx_ml_proto3::SparseTensorProto>,
    pub sequence_value: ::protobuf::SingularPtrField<SequenceProto>,
    pub map_value: ::protobuf::SingularPtrField<MapProto>,
    pub optional_value: ::protobuf::SingularPtrField<OptionalProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OptionalProto {
    fn default() -> &'a OptionalProto {
        <OptionalProto as ::protobuf::Message>::default_instance()
    }
}

impl OptionalProto {
    pub fn new() -> OptionalProto {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // int32 elem_type = 2;


    pub fn get_elem_type(&self) -> i32 {
        self.elem_type
    }
    pub fn clear_elem_type(&mut self) {
        self.elem_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_elem_type(&mut self, v: i32) {
        self.elem_type = v;
    }

    // .onnx.TensorProto tensor_value = 3;


    pub fn get_tensor_value(&self) -> &super::onnx_ml_proto3::TensorProto {
        self.tensor_value.as_ref().unwrap_or_else(|| <super::onnx_ml_proto3::TensorProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tensor_value(&mut self) {
        self.tensor_value.clear();
    }

    pub fn has_tensor_value(&self) -> bool {
        self.tensor_value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tensor_value(&mut self, v: super::onnx_ml_proto3::TensorProto) {
        self.tensor_value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tensor_value(&mut self) -> &mut super::onnx_ml_proto3::TensorProto {
        if self.tensor_value.is_none() {
            self.tensor_value.set_default();
        }
        self.tensor_value.as_mut().unwrap()
    }

    // Take field
    pub fn take_tensor_value(&mut self) -> super::onnx_ml_proto3::TensorProto {
        self.tensor_value.take().unwrap_or_else(|| super::onnx_ml_proto3::TensorProto::new())
    }

    // .onnx.SparseTensorProto sparse_tensor_value = 4;


    pub fn get_sparse_tensor_value(&self) -> &super::onnx_ml_proto3::SparseTensorProto {
        self.sparse_tensor_value.as_ref().unwrap_or_else(|| <super::onnx_ml_proto3::SparseTensorProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sparse_tensor_value(&mut self) {
        self.sparse_tensor_value.clear();
    }

    pub fn has_sparse_tensor_value(&self) -> bool {
        self.sparse_tensor_value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sparse_tensor_value(&mut self, v: super::onnx_ml_proto3::SparseTensorProto) {
        self.sparse_tensor_value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sparse_tensor_value(&mut self) -> &mut super::onnx_ml_proto3::SparseTensorProto {
        if self.sparse_tensor_value.is_none() {
            self.sparse_tensor_value.set_default();
        }
        self.sparse_tensor_value.as_mut().unwrap()
    }

    // Take field
    pub fn take_sparse_tensor_value(&mut self) -> super::onnx_ml_proto3::SparseTensorProto {
        self.sparse_tensor_value.take().unwrap_or_else(|| super::onnx_ml_proto3::SparseTensorProto::new())
    }

    // .onnx.SequenceProto sequence_value = 5;


    pub fn get_sequence_value(&self) -> &SequenceProto {
        self.sequence_value.as_ref().unwrap_or_else(|| <SequenceProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sequence_value(&mut self) {
        self.sequence_value.clear();
    }

    pub fn has_sequence_value(&self) -> bool {
        self.sequence_value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sequence_value(&mut self, v: SequenceProto) {
        self.sequence_value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sequence_value(&mut self) -> &mut SequenceProto {
        if self.sequence_value.is_none() {
            self.sequence_value.set_default();
        }
        self.sequence_value.as_mut().unwrap()
    }

    // Take field
    pub fn take_sequence_value(&mut self) -> SequenceProto {
        self.sequence_value.take().unwrap_or_else(|| SequenceProto::new())
    }

    // .onnx.MapProto map_value = 6;


    pub fn get_map_value(&self) -> &MapProto {
        self.map_value.as_ref().unwrap_or_else(|| <MapProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_map_value(&mut self) {
        self.map_value.clear();
    }

    pub fn has_map_value(&self) -> bool {
        self.map_value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_map_value(&mut self, v: MapProto) {
        self.map_value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_map_value(&mut self) -> &mut MapProto {
        if self.map_value.is_none() {
            self.map_value.set_default();
        }
        self.map_value.as_mut().unwrap()
    }

    // Take field
    pub fn take_map_value(&mut self) -> MapProto {
        self.map_value.take().unwrap_or_else(|| MapProto::new())
    }

    // .onnx.OptionalProto optional_value = 7;


    pub fn get_optional_value(&self) -> &OptionalProto {
        self.optional_value.as_ref().unwrap_or_else(|| <OptionalProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_optional_value(&mut self) {
        self.optional_value.clear();
    }

    pub fn has_optional_value(&self) -> bool {
        self.optional_value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_optional_value(&mut self, v: OptionalProto) {
        self.optional_value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_optional_value(&mut self) -> &mut OptionalProto {
        if self.optional_value.is_none() {
            self.optional_value.set_default();
        }
        self.optional_value.as_mut().unwrap()
    }

    // Take field
    pub fn take_optional_value(&mut self) -> OptionalProto {
        self.optional_value.take().unwrap_or_else(|| OptionalProto::new())
    }
}

impl ::protobuf::Message for OptionalProto {
    fn is_initialized(&self) -> bool {
        for v in &self.tensor_value {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sparse_tensor_value {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sequence_value {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.map_value {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.optional_value {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.elem_type = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tensor_value)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sparse_tensor_value)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sequence_value)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.map_value)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.optional_value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.elem_type != 0 {
            my_size += ::protobuf::rt::value_size(2, self.elem_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.tensor_value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.sparse_tensor_value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.sequence_value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.map_value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.optional_value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.elem_type != 0 {
            os.write_int32(2, self.elem_type)?;
        }
        if let Some(ref v) = self.tensor_value.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.sparse_tensor_value.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.sequence_value.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.map_value.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.optional_value.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OptionalProto {
        OptionalProto::new()
    }

    fn default_instance() -> &'static OptionalProto {
        static instance: ::protobuf::rt::LazyV2<OptionalProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OptionalProto::new)
    }
}

impl ::protobuf::Clear for OptionalProto {
    fn clear(&mut self) {
        self.name.clear();
        self.elem_type = 0;
        self.tensor_value.clear();
        self.sparse_tensor_value.clear();
        self.sequence_value.clear();
        self.map_value.clear();
        self.optional_value.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for OptionalProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum OptionalProto_DataType {
    UNDEFINED = 0,
    TENSOR = 1,
    SPARSE_TENSOR = 2,
    SEQUENCE = 3,
    MAP = 4,
    OPTIONAL = 5,
}

impl ::protobuf::ProtobufEnum for OptionalProto_DataType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<OptionalProto_DataType> {
        match value {
            0 => ::std::option::Option::Some(OptionalProto_DataType::UNDEFINED),
            1 => ::std::option::Option::Some(OptionalProto_DataType::TENSOR),
            2 => ::std::option::Option::Some(OptionalProto_DataType::SPARSE_TENSOR),
            3 => ::std::option::Option::Some(OptionalProto_DataType::SEQUENCE),
            4 => ::std::option::Option::Some(OptionalProto_DataType::MAP),
            5 => ::std::option::Option::Some(OptionalProto_DataType::OPTIONAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [OptionalProto_DataType] = &[
            OptionalProto_DataType::UNDEFINED,
            OptionalProto_DataType::TENSOR,
            OptionalProto_DataType::SPARSE_TENSOR,
            OptionalProto_DataType::SEQUENCE,
            OptionalProto_DataType::MAP,
            OptionalProto_DataType::OPTIONAL,
        ];
        values
    }
}

impl ::std::marker::Copy for OptionalProto_DataType {
}

impl ::std::default::Default for OptionalProto_DataType {
    fn default() -> Self {
        OptionalProto_DataType::UNDEFINED
    }
}

impl ::protobuf::reflect::ProtobufValue for OptionalProto_DataType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}
