// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `onnx-operators-ml.proto3`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct OperatorProto {
    // message fields
    pub op_type: ::std::string::String,
    pub since_version: i64,
    pub status: super::onnx_ml_proto3::OperatorStatus,
    pub doc_string: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OperatorProto {
    fn default() -> &'a OperatorProto {
        <OperatorProto as ::protobuf::Message>::default_instance()
    }
}

impl OperatorProto {
    pub fn new() -> OperatorProto {
        ::std::default::Default::default()
    }

    // string op_type = 1;


    pub fn get_op_type(&self) -> &str {
        &self.op_type
    }
    pub fn clear_op_type(&mut self) {
        self.op_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_op_type(&mut self, v: ::std::string::String) {
        self.op_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_op_type(&mut self) -> &mut ::std::string::String {
        &mut self.op_type
    }

    // Take field
    pub fn take_op_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.op_type, ::std::string::String::new())
    }

    // int64 since_version = 2;


    pub fn get_since_version(&self) -> i64 {
        self.since_version
    }
    pub fn clear_since_version(&mut self) {
        self.since_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_since_version(&mut self, v: i64) {
        self.since_version = v;
    }

    // .onnx.OperatorStatus status = 3;


    pub fn get_status(&self) -> super::onnx_ml_proto3::OperatorStatus {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = super::onnx_ml_proto3::OperatorStatus::EXPERIMENTAL;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: super::onnx_ml_proto3::OperatorStatus) {
        self.status = v;
    }

    // string doc_string = 10;


    pub fn get_doc_string(&self) -> &str {
        &self.doc_string
    }
    pub fn clear_doc_string(&mut self) {
        self.doc_string.clear();
    }

    // Param is passed by value, moved
    pub fn set_doc_string(&mut self, v: ::std::string::String) {
        self.doc_string = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_doc_string(&mut self) -> &mut ::std::string::String {
        &mut self.doc_string
    }

    // Take field
    pub fn take_doc_string(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.doc_string, ::std::string::String::new())
    }
}

impl ::protobuf::Message for OperatorProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.op_type)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.since_version = tmp;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 3, &mut self.unknown_fields)?
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.doc_string)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.op_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.op_type);
        }
        if self.since_version != 0 {
            my_size += ::protobuf::rt::value_size(2, self.since_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.status != super::onnx_ml_proto3::OperatorStatus::EXPERIMENTAL {
            my_size += ::protobuf::rt::enum_size(3, self.status);
        }
        if !self.doc_string.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.doc_string);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.op_type.is_empty() {
            os.write_string(1, &self.op_type)?;
        }
        if self.since_version != 0 {
            os.write_int64(2, self.since_version)?;
        }
        if self.status != super::onnx_ml_proto3::OperatorStatus::EXPERIMENTAL {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if !self.doc_string.is_empty() {
            os.write_string(10, &self.doc_string)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OperatorProto {
        OperatorProto::new()
    }

    fn default_instance() -> &'static OperatorProto {
        static instance: ::protobuf::rt::LazyV2<OperatorProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OperatorProto::new)
    }
}

impl ::protobuf::Clear for OperatorProto {
    fn clear(&mut self) {
        self.op_type.clear();
        self.since_version = 0;
        self.status = super::onnx_ml_proto3::OperatorStatus::EXPERIMENTAL;
        self.doc_string.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for OperatorProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct OperatorSetProto {
    // message fields
    pub magic: ::std::string::String,
    pub ir_version: i64,
    pub ir_version_prerelease: ::std::string::String,
    pub ir_build_metadata: ::std::string::String,
    pub domain: ::std::string::String,
    pub opset_version: i64,
    pub doc_string: ::std::string::String,
    pub operator: ::protobuf::RepeatedField<OperatorProto>,
    pub functions: ::protobuf::RepeatedField<super::onnx_ml_proto3::FunctionProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OperatorSetProto {
    fn default() -> &'a OperatorSetProto {
        <OperatorSetProto as ::protobuf::Message>::default_instance()
    }
}

impl OperatorSetProto {
    pub fn new() -> OperatorSetProto {
        ::std::default::Default::default()
    }

    // string magic = 1;


    pub fn get_magic(&self) -> &str {
        &self.magic
    }
    pub fn clear_magic(&mut self) {
        self.magic.clear();
    }

    // Param is passed by value, moved
    pub fn set_magic(&mut self, v: ::std::string::String) {
        self.magic = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_magic(&mut self) -> &mut ::std::string::String {
        &mut self.magic
    }

    // Take field
    pub fn take_magic(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.magic, ::std::string::String::new())
    }

    // int64 ir_version = 2;


    pub fn get_ir_version(&self) -> i64 {
        self.ir_version
    }
    pub fn clear_ir_version(&mut self) {
        self.ir_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_ir_version(&mut self, v: i64) {
        self.ir_version = v;
    }

    // string ir_version_prerelease = 3;


    pub fn get_ir_version_prerelease(&self) -> &str {
        &self.ir_version_prerelease
    }
    pub fn clear_ir_version_prerelease(&mut self) {
        self.ir_version_prerelease.clear();
    }

    // Param is passed by value, moved
    pub fn set_ir_version_prerelease(&mut self, v: ::std::string::String) {
        self.ir_version_prerelease = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ir_version_prerelease(&mut self) -> &mut ::std::string::String {
        &mut self.ir_version_prerelease
    }

    // Take field
    pub fn take_ir_version_prerelease(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ir_version_prerelease, ::std::string::String::new())
    }

    // string ir_build_metadata = 7;


    pub fn get_ir_build_metadata(&self) -> &str {
        &self.ir_build_metadata
    }
    pub fn clear_ir_build_metadata(&mut self) {
        self.ir_build_metadata.clear();
    }

    // Param is passed by value, moved
    pub fn set_ir_build_metadata(&mut self, v: ::std::string::String) {
        self.ir_build_metadata = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ir_build_metadata(&mut self) -> &mut ::std::string::String {
        &mut self.ir_build_metadata
    }

    // Take field
    pub fn take_ir_build_metadata(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ir_build_metadata, ::std::string::String::new())
    }

    // string domain = 4;


    pub fn get_domain(&self) -> &str {
        &self.domain
    }
    pub fn clear_domain(&mut self) {
        self.domain.clear();
    }

    // Param is passed by value, moved
    pub fn set_domain(&mut self, v: ::std::string::String) {
        self.domain = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_domain(&mut self) -> &mut ::std::string::String {
        &mut self.domain
    }

    // Take field
    pub fn take_domain(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.domain, ::std::string::String::new())
    }

    // int64 opset_version = 5;


    pub fn get_opset_version(&self) -> i64 {
        self.opset_version
    }
    pub fn clear_opset_version(&mut self) {
        self.opset_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_opset_version(&mut self, v: i64) {
        self.opset_version = v;
    }

    // string doc_string = 6;


    pub fn get_doc_string(&self) -> &str {
        &self.doc_string
    }
    pub fn clear_doc_string(&mut self) {
        self.doc_string.clear();
    }

    // Param is passed by value, moved
    pub fn set_doc_string(&mut self, v: ::std::string::String) {
        self.doc_string = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_doc_string(&mut self) -> &mut ::std::string::String {
        &mut self.doc_string
    }

    // Take field
    pub fn take_doc_string(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.doc_string, ::std::string::String::new())
    }

    // repeated .onnx.OperatorProto operator = 8;


    pub fn get_operator(&self) -> &[OperatorProto] {
        &self.operator
    }
    pub fn clear_operator(&mut self) {
        self.operator.clear();
    }

    // Param is passed by value, moved
    pub fn set_operator(&mut self, v: ::protobuf::RepeatedField<OperatorProto>) {
        self.operator = v;
    }

    // Mutable pointer to the field.
    pub fn mut_operator(&mut self) -> &mut ::protobuf::RepeatedField<OperatorProto> {
        &mut self.operator
    }

    // Take field
    pub fn take_operator(&mut self) -> ::protobuf::RepeatedField<OperatorProto> {
        ::std::mem::replace(&mut self.operator, ::protobuf::RepeatedField::new())
    }

    // repeated .onnx.FunctionProto functions = 9;


    pub fn get_functions(&self) -> &[super::onnx_ml_proto3::FunctionProto] {
        &self.functions
    }
    pub fn clear_functions(&mut self) {
        self.functions.clear();
    }

    // Param is passed by value, moved
    pub fn set_functions(&mut self, v: ::protobuf::RepeatedField<super::onnx_ml_proto3::FunctionProto>) {
        self.functions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_functions(&mut self) -> &mut ::protobuf::RepeatedField<super::onnx_ml_proto3::FunctionProto> {
        &mut self.functions
    }

    // Take field
    pub fn take_functions(&mut self) -> ::protobuf::RepeatedField<super::onnx_ml_proto3::FunctionProto> {
        ::std::mem::replace(&mut self.functions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for OperatorSetProto {
    fn is_initialized(&self) -> bool {
        for v in &self.operator {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.functions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.magic)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ir_version = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ir_version_prerelease)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ir_build_metadata)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.domain)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.opset_version = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.doc_string)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.operator)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.functions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.magic.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.magic);
        }
        if self.ir_version != 0 {
            my_size += ::protobuf::rt::value_size(2, self.ir_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.ir_version_prerelease.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.ir_version_prerelease);
        }
        if !self.ir_build_metadata.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.ir_build_metadata);
        }
        if !self.domain.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.domain);
        }
        if self.opset_version != 0 {
            my_size += ::protobuf::rt::value_size(5, self.opset_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.doc_string.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.doc_string);
        }
        for value in &self.operator {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.functions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.magic.is_empty() {
            os.write_string(1, &self.magic)?;
        }
        if self.ir_version != 0 {
            os.write_int64(2, self.ir_version)?;
        }
        if !self.ir_version_prerelease.is_empty() {
            os.write_string(3, &self.ir_version_prerelease)?;
        }
        if !self.ir_build_metadata.is_empty() {
            os.write_string(7, &self.ir_build_metadata)?;
        }
        if !self.domain.is_empty() {
            os.write_string(4, &self.domain)?;
        }
        if self.opset_version != 0 {
            os.write_int64(5, self.opset_version)?;
        }
        if !self.doc_string.is_empty() {
            os.write_string(6, &self.doc_string)?;
        }
        for v in &self.operator {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.functions {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OperatorSetProto {
        OperatorSetProto::new()
    }

    fn default_instance() -> &'static OperatorSetProto {
        static instance: ::protobuf::rt::LazyV2<OperatorSetProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OperatorSetProto::new)
    }
}

impl ::protobuf::Clear for OperatorSetProto {
    fn clear(&mut self) {
        self.magic.clear();
        self.ir_version = 0;
        self.ir_version_prerelease.clear();
        self.ir_build_metadata.clear();
        self.domain.clear();
        self.opset_version = 0;
        self.doc_string.clear();
        self.operator.clear();
        self.functions.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for OperatorSetProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}
